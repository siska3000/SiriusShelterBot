import logging
import re

import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)

from handlers.base_handler import BaseHandler

# from googleapiclient.discovery import build
# from googleapiclient.errors import HttpError

# States
EMAIL, PHONE, FIRST_NAME, LAST_NAME, COMMENT = range(5)

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class GiveFamilyHandler(BaseHandler):
    # Google Sheets config
    CREDENTIALS_FILE = "sirius_key (2).json"
    SPREADSHEET_ID = "1jjIDk58RjKF8SeNrm0a3Ijt8zpLa9pT2wej4053MXZk"  # Direct spreadsheet ID
    WORKSHEET_NAME = "–õ–∏—Å—Ç1"
    SHEET_LINK = "https://docs.google.com/spreadsheets/d/1jjIDk58RjKF8SeNrm0a3Ijt8zpLa9pT2wej4053MXZk/edit?usp=sharing"
    SERVICE_ACCOUNT_EMAIL = "sheltersirius@sirius-459511.iam.gserviceaccount.com"  # From your credentials file

    @classmethod
    def register(cls, app, button):
        conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(cls.start_conversation, pattern='^givefamily$')
            ],
            states={
                EMAIL: [MessageHandler(filters.TEXT & ~filters.CONTACT, cls.get_email)],
                PHONE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, cls.get_phone),
                    MessageHandler(filters.CONTACT, cls.get_phone)
                ],
                FIRST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, cls.get_first_name)],
                LAST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, cls.get_last_name)],
                COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, cls.get_comment)],
            },
            fallbacks=[],  # –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –¥–æ–¥–∞—Ç–∏ fallbacks –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏
            allow_reentry=True,
        )
        app.add_handler(conv_handler)
        logger.info("GiveFamilyHandler registered.")

    @staticmethod
    async def start_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üìù –©–æ–± –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Å—ñ–º'—é —Ç–≤–∞—Ä–∏–Ω—Ü—ñ, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–æ—Ç–∫—É –∞–Ω–∫–µ—Ç—É.\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –µ–º–µ–π–ª:"
        )
        return EMAIL

    @staticmethod
    def _get_google_sheet_client():
        try:
            scope = [
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive"
            ]
            creds = ServiceAccountCredentials.from_json_keyfile_name(
                GiveFamilyHandler.CREDENTIALS_FILE,
                scope
            )
            logger.info(f"Authenticating with service account: {creds.service_account_email}")
            return gspread.authorize(creds)
        except Exception as e:
            logger.error(f"Google Sheets authentication error: {e}")
            raise  # –ü—Ä–æ–∫–∏–¥–∞—î–º–æ –≤–∏–Ω—è—Ç–æ–∫ –¥–∞–ª—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ get_comment

    @staticmethod
    def _verify_sheet_access():
        """Verify access to the specific spreadsheet"""
        try:
            client = GiveFamilyHandler._get_google_sheet_client()

            # Try to open the spreadsheet directly by ID
            spreadsheet = client.open_by_key(GiveFamilyHandler.SPREADSHEET_ID)

            # Verify worksheet exists or create it
            try:
                worksheet = spreadsheet.worksheet(GiveFamilyHandler.WORKSHEET_NAME)
                logger.info(f"Found worksheet: {GiveFamilyHandler.WORKSHEET_NAME}")
            except gspread.exceptions.WorksheetNotFound:
                worksheet = spreadsheet.add_worksheet(
                    title=GiveFamilyHandler.WORKSHEET_NAME,
                    rows=1000,  # –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –∑—Ä–æ–±–∏—Ç–∏ –±—ñ–ª—å—à–µ —Ä—è–¥–∫—ñ–≤
                    cols=20  # –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –∑—Ä–æ–±–∏—Ç–∏ –±—ñ–ª—å—à–µ —Å—Ç–æ–≤–ø—Ü—ñ–≤
                )
                logger.info(f"Created new worksheet: {GiveFamilyHandler.WORKSHEET_NAME}")

            # –ú–æ–∂–Ω–∞ —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Å—Ç–æ–≤–ø—Ü—ñ–≤ —Ç—É—Ç

            return True
        except gspread.exceptions.APIError as e:
            if 'PERMISSION_DENIED' in str(e):
                error_msg = (
                    "üîí –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Google –¢–∞–±–ª–∏—Ü—ñ\n\n"
                    f"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥–ª—è –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É:\n"
                    f"{GiveFamilyHandler.SERVICE_ACCOUNT_EMAIL}\n\n"
                    f"1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Ç–∞–±–ª–∏—Ü—é: {GiveFamilyHandler.SHEET_LINK}\n"
                    f"2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É' (Share)\n"
                    f"3. –î–æ–¥–∞–π—Ç–µ –≤–∏—â–µ–≤–∫–∞–∑–∞–Ω–∏–π email –∑ –ø—Ä–∞–≤–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ (Editor)"
                )
                logger.error(error_msg)
                raise PermissionError(error_msg)  # –ü—Ä–æ–∫–∏–¥–∞—î–º–æ PermissionError
            raise  # –ü—Ä–æ–∫–∏–¥–∞—î–º–æ —ñ–Ω—à—ñ APIError
        except Exception as e:
            logger.error(f"Sheet access verification failed: {e}")
            raise  # –ü—Ä–æ–∫–∏–¥–∞—î–º–æ —ñ–Ω—à—ñ –≤–∏–Ω—è—Ç–∫–∏

    @staticmethod
    def _append_to_sheet(context: ContextTypes.DEFAULT_TYPE,
                         user_data_list: list):  # –ü—Ä–∏–π–º–∞—î–º–æ context —Ç–∞ —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        """Appends application data including pet URL and application ID to the Google Sheet."""
        try:
            client = GiveFamilyHandler._get_google_sheet_client()
            spreadsheet = client.open_by_key(GiveFamilyHandler.SPREADSHEET_ID)

            try:
                worksheet = spreadsheet.worksheet(GiveFamilyHandler.WORKSHEET_NAME)
            except gspread.exceptions.WorksheetNotFound:
                logger.warning(f"Worksheet '{GiveFamilyHandler.WORKSHEET_NAME}' not found, attempting to create.")
                worksheet = spreadsheet.add_worksheet(
                    title=GiveFamilyHandler.WORKSHEET_NAME,
                    rows=1000,
                    cols=20
                )

            all_rows = worksheet.get_all_values()
            next_application_id = len(all_rows) + 1

            # –û—Ç—Ä–∏–º—É—î–º–æ ProfileURL —Ç–≤–∞—Ä–∏–Ω–∫–∏ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            pet_profile_url = context.user_data.get('current_pet_url', 'N/A')

            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π —Ä—è–¥–æ–∫ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞–ø–∏—Å—É
            # –ü–æ—Ä—è–¥–æ–∫: ID –∞–Ω–∫–µ—Ç–∏, ProfileURL —Ç–≤–∞—Ä–∏–Ω–∫–∏, email, phone, first_name, last_name, comment
            # **–ü–ï–†–ï–í–Ü–†–¢–ï –ü–û–†–Ø–î–û–ö –°–¢–û–í–ü–¶–Ü–í –£ –í–ê–®–Ü–ô GOOGLE –¢–ê–ë–õ–ò–¶–Ü!**
            full_data_row = [
                next_application_id,  # 1. ID –∞–Ω–∫–µ—Ç–∏
                pet_profile_url,  # 2. ProfileURL —Ç–≤–∞—Ä–∏–Ω–∫–∏
                *user_data_list
                # 3-7. –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (email, phone, first_name, last_name, comment)
            ]

            worksheet.append_row(full_data_row)  # –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ–≤–Ω–∏–π —Ä—è–¥–æ–∫
            logger.info(f"Successfully wrote data to sheet: {full_data_row}")
            return True
        except Exception as e:
            logger.error(f"Failed to write to sheet: {e}")
            raise  # –ü—Ä–æ–∫–∏–¥–∞—î–º–æ –≤–∏–Ω—è—Ç–æ–∫ –¥–∞–ª—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ get_comment

    @staticmethod
    async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
        email = update.message.text.strip()

        if not re.match(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", email):
            await update.message.reply_text("‚ùå –í–∏ –≤–≤–µ–ª–∏ –Ω–µ–≤—ñ—Ä–Ω–∏–π email. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return EMAIL

        context.user_data['email'] = email
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø–∏—Ç—É –∫–æ–Ω—Ç–∞–∫—Ç—É
        keyboard = [
            [KeyboardButton('–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É', request_contact=True)]  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True,
                                           resize_keyboard=True)  # resize_keyboard –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤–∏–≥–ª—è–¥—É

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üìû –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É':",
            # –ó–º—ñ–Ω–µ–Ω–æ —Ç–µ–∫—Å—Ç –ø—ñ–¥ –∫–Ω–æ–ø–∫—É
            reply_markup=reply_markup
        )

        return PHONE

    @staticmethod
    async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∫–æ–Ω—Ç–∞–∫—Ç
        if update.message.contact:
            phone = update.message.contact.phone_number
            # –ü—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É, –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
            reply_markup = ReplyKeyboardRemove()
            await update.message.reply_text("–î—è–∫—É—é! –ù–æ–º–µ—Ä –æ—Ç—Ä–∏–º–∞–Ω–æ.",
                                            reply_markup=reply_markup)  # –î–æ–¥–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—É
        else:
            phone = update.message.text.strip()
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à —Å—Ç—Ä–æ–≥—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Ñ–æ—Ä–º–∞—Ç—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É, —è–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞

        # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–æ–º–µ—Ä—É
        if not phone:
            await update.message.reply_text(
                "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏.")
            return PHONE

        context.user_data['phone'] = phone
        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —è–∫—â–æ –Ω–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É)
        # –ê–±–æ —Ü–µ –≤–∂–µ –∑—Ä–æ–±–ª–µ–Ω–æ, —è–∫—â–æ –Ω–æ–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=update.message.message_id  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –∑–∞–ø–∏—Ç—É –∫–æ–Ω—Ç–∞–∫—Ç—É
            )
            # –ê–±–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        except Exception:
            pass

        await update.message.reply_text("üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
        return FIRST_NAME

    @staticmethod
    async def get_first_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
        first_name = update.message.text.strip()
        context.user_data['first_name'] = first_name if first_name else "N/A"
        await update.message.reply_text("üë• –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ:")
        return LAST_NAME

    @staticmethod
    async def get_last_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
        last_name = update.message.text.strip()
        context.user_data['last_name'] = last_name if last_name else "N/A"
        await update.message.reply_text("üí¨ –ó–∞–ª–∏—à—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä (–∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', —è–∫—â–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è –Ω–µ–º–∞—î):")
        return COMMENT

    @staticmethod
    async def get_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
        comment = update.message.text.strip()
        context.user_data['comment'] = comment if comment.lower() not in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', 'skip'] else "N/A"

        # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–ø–∏—Å–æ–∫
        user_data_list = [
            context.user_data.get('email', 'N/A'),
            context.user_data.get('phone', 'N/A'),
            context.user_data.get('first_name', 'N/A'),
            context.user_data.get('last_name', 'N/A'),
            context.user_data.get('comment', 'N/A'),
        ]

        # –û—Ç—Ä–∏–º—É—î–º–æ URL —Ç–≤–∞—Ä–∏–Ω–∫–∏, –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ä–∞–Ω—ñ—à–µ
        pet_profile_url = context.user_data.get('current_pet_url', 'N/A')

        try:
            GiveFamilyHandler._append_to_sheet(context, user_data_list)

            # –§–æ—Ä–º—É—î–º–æ summary –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ URL —Ç–≤–∞—Ä–∏–Ω–∫–∏)
            summary = (
                f"‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!\n\n"
                f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–≤–∞—Ä–∏–Ω–∫—É: {pet_profile_url}\n"  # –î–æ–¥–∞–Ω–æ URL —Ç–≤–∞—Ä–∏–Ω–∫–∏
                f"üìß –ï–º–µ–π–ª: {user_data_list[0]}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data_list[1]}\n"
                f"üë§ –Ü–º'—è: {user_data_list[2]}\n"
                f"üë• –ü—Ä—ñ–∑–≤–∏—â–µ: {user_data_list[3]}\n"
                f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {user_data_list[4]}\n\n"
                f"–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ –Ω–∞—à–∏—Ö –ø—ñ–¥–æ–ø—ñ—á–Ω–∏—Ö! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
            # –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            )
            await update.message.reply_text(summary)

        except PermissionError as e:
            # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
            await update.message.reply_text(str(e))
        except Exception as e:
            # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫ –∑–∞–ø–∏—Å—É
            logger.error(f"Failed to save data to sheet in get_comment: {e}")
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–Ω–∫–µ—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ —ñ–Ω—à–∏–º —Å–ø–æ—Å–æ–±–æ–º."
            )

        # Clear conversation data
        context.user_data.clear()
        return ConversationHandler.END
