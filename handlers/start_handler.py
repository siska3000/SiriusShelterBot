import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler

from handlers.base_handler import BaseHandler
from handlers.manager_handler import ManagerHandler
from handlers.pet_handler import PetHandler
from handlers.socialmedia_handler import SocialMediaHandler
from handlers.support_handler import SupportHandler

logger = logging.getLogger(__name__)


class StartHandler(BaseHandler):
    @classmethod
    def register(cls, app, button_handler):
        app.add_handler(CommandHandler('start', cls.callback))

        button_handler.register_callback('support', SupportHandler.callback)
        button_handler.register_callback('FAQ', ManagerHandler.callback)
        button_handler.register_callback('socmed', SocialMediaHandler.callback)
        button_handler.register_callback('watchpet', PetHandler.callback)
        button_handler.register_callback('menu', cls.callback)

    @staticmethod
    async def callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        is_admin = BaseHandler.is_admin(user_id)
        logger.info(f"User {user_id} is admin: {is_admin}")

        keyboard = [
            [InlineKeyboardButton('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–≤–∞—Ä–∏–Ω üê∂', callback_data='watchpet')],
            [
                InlineKeyboardButton('–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å üíµ‚ù§Ô∏è', callback_data='support'),
                InlineKeyboardButton("–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏ ‚òéÔ∏è", callback_data='FAQ'),
            ],
            [InlineKeyboardButton("–ù–∞—à—ñ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ üì¢", callback_data='socmed')]
        ]

        if is_admin:
            keyboard.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_secret_panel')])

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            try:
                await context.bot.delete_message(
                    chat_id=update.callback_query.message.chat_id,
                    message_id=update.callback_query.message.message_id
                )
            except Exception as e:
                logger.warning(f"Failed to delete previous message in start_handler: {e}")

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ñ—Ç–∞—é! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø—Ä–∏—Ç—É–ª–∫—É –¥–ª—è —Ç–≤–∞—Ä–∏–Ω –°—ñ—Ä—ñ—É—Å üòä",
            reply_markup=reply_markup
        )
