from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from handlers.animal_handlers import AllpetHandler, CatHandler, DogHandler
from handlers.base_handler import BaseHandler

class PetHandler(BaseHandler):
    @classmethod
    def register(cls, app, button_handler):
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –∫–æ–ª–±–µ–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–∏–±–æ—Ä—É –≤–∏–¥—É —Ç–≤–∞—Ä–∏–Ω–∏
        button_handler.register_callback('allpets', AllpetHandler.callback)
        button_handler.register_callback('cat', cls.cat_callback)
        button_handler.register_callback('dog', cls.dog_callback)
        button_handler.register_callback('menu', cls.callback)

    @staticmethod
    async def callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –≤–∏–¥—É —Ç–≤–∞—Ä–∏–Ω–∏
        keyboard = [
            [InlineKeyboardButton('–í—Å—ñ —Ç–≤–∞—Ä–∏–Ω–∏ üò∫üê∂', callback_data='allpets')],
            [
                InlineKeyboardButton('–ö–æ—Ç–∏ üò∫', callback_data='cat'),
                InlineKeyboardButton('–°–æ–±–∞–∫–∏ üê∂', callback_data='dog')
            ],
            [InlineKeyboardButton('–£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='menu')],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –Ω–æ–≤–æ–≥–æ
        if update.callback_query:
            await context.bot.delete_message(
                chat_id=update.callback_query.message.chat_id,
                message_id=update.callback_query.message.message_id
            )

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∏–±–æ—Ä—É –≤–∏–¥—É —Ç–≤–∞—Ä–∏–Ω–∏
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–î–ª—è –ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≤–∏–¥ —É–ª—é–±–ª–µ–Ω—Ü—è",
            reply_markup=reply_markup
        )

    @staticmethod
    async def cat_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –≤–∏–¥—É —è–∫ "–ö—ñ—Ç" —É –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        context.user_data['species'] = '–ö—ñ—Ç'
        await PetHandler.show_pet(update, context)

    @staticmethod
    async def dog_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –≤–∏–¥—É —è–∫ "–°–æ–±–∞–∫–∞" —É –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        context.user_data['species'] = '–ü–µ—Å'
        await PetHandler.show_pet(update, context)

    @staticmethod
    async def show_pet(update: Update, context: ContextTypes.DEFAULT_TYPE):
        species = context.user_data.get('species', '–ö—ñ—Ç')  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∫–æ—Ç–∏

        # –¢–µ–ø–µ—Ä —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–≤–∞—Ä–∏–Ω –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∏–±–æ—Ä—É –≤–∏–¥—É
        if species == '–ö—ñ—Ç':
            await CatHandler.callback(update, context)
        elif species == '–ü–µ—Å':
            await DogHandler.callback(update, context)
        else:
            # –Ø–∫—â–æ –≤–∏–±—ñ—Ä –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ —Ç–≤–∞—Ä–∏–Ω–∏
            await AllpetHandler.callback(update, context)
